###################################################
# 《YiiPlus脚手架》持续集成配置
#
# YiiPlus Scaffold
# Application  [common console admin app pc h5]
# Environments [Development Testing Production]
# 
# 系统定义变量
#   SSH_PRIVATE_KEY           私钥（免密登录）
#   SSH_SERVERS_TEST          测试服务器（root@192.168.1.101）
#   SSH_SERVERS_PRE           预发布服务器（root@192.168.1.102）
#   SSH_SERVERS_PROD          生产服务器（root@192.168.1.103）
#   DOCKER_REGISTRY_URL       Docker仓库地址
#   DOCKER_REGISTRY_USER      Docker仓库用户名
#   DOCKER_REGISTRY_PASSWD    Docker仓库密码
#   HTTP_PORT                 http 端口 (8081)
#   HTTPS_PORT                https 端口 (4431)
###################################################

image: gengxiankun/build:latest

stages:
  - build
  - test
  - package
  - deploy
  - release

variables:
  BUILD_PATH: /data/build_release/
  WEBSITE_PATH: /data/website/
  RUNTIME_PATH: /data/runtime/
  KEEP_VERSION_NUM: 10

.services: &services
  services:
    - name: mysql:5.6
      alias: mysql
      command: ['--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci','--default-storage-engine=INNODB','--innodb_large_prefix=1','--innodb_file_format=Barracuda']
    - name: redis:alpine
      alias: redis
  variables:
    MYSQL_ROOT_PASSWORD: root
    MYSQL_DATABASE: yiiplus
    MYSQL_USER: web
    MYSQL_PASSWORD: web

############## build ##############
build:composer:
  stage: build
  retry: 2
  cache:
    key: "${CI_COMMIT_REF_NAME}"
    paths:
      - vendor
  script:
    - echo $docker_env
    - composer install --prefer-dist --optimize-autoloader -n --no-interaction  --no-suggest -vvv
    - composer dump-autoload --optimize

build:docker-cgi:
  extends: .build-docker
  variables:
    DOCKER_NAME: cgi
  only:
    changes:
      - docker/files/cgi/*

build:docker-proxy:
  extends: .build-docker
  variables:
    DOCKER_NAME: proxy
  only:
    changes:
      - docker/files/proxy/*

build:docker-crond:
  extends: .build-docker
  variables:
    DOCKER_NAME: crond
  only:
    changes:
      - docker/files/crond/*

############## test ##############
codeview:phpcs:
  extends: .stage-test
  script:
    - php vendor/bin/phpcs --standard=PSR2 --ignore=docs/,docker/,vendor/,console/migrations/,tests -w --colors ./
  except:
    refs:
      - develop
      - master
      - tags

codeview:phpmd:
  extends: .stage-test
  script:
    - php vendor/bin/phpmd admin,app,common,console,pc,h5 text phpmd.xml --exclude docs/,docker/,vendor/,console/migrations,tests
  except:
    refs:
      - develop
      - master
      - tags

codeview:codequality:
  extends: .stage-test
  image: docker:latest
  cache: {}
  before_script: []
  script:
    - docker pull codeclimate/codeclimate
    - VOLUME_PATH=/tmp/builds"$(echo $PWD | sed 's|^/[^/]*||')"
    - docker run --env CODECLIMATE_CODE="$VOLUME_PATH" -v /tmp/cc:/tmp/cc -v $VOLUME_PATH:/code -v /var/run/docker.sock:/var/run/docker.sock codeclimate/codeclimate analyze -f text
  except:
    refs:
      - tags
      - develop
      - master
  allow_failure: true
  when: manual

# test:unit:
#   extends: .stage-test
#   <<: *services
#   coverage: '/^\s*Lines:\s*\d+.\d+\%/'
#   script:
#     - php init --env=Development --overwrite=y
#     - ./yii migrate/up --interactive=0
#     - ./vendor/bin/codecept run unit -c tests --coverage --no-colors
#   artifacts:
#     name: "debug"
#     when: on_failure
#     untracked: true
#     paths:
#         - ${CI_PROJECT_DIR}/tests/_output
# test:api:
#   extends: .stage-test
#   <<: *services
#   script:
#     - php init --env=Development --overwrite=y
#     - ./yii migrate/up --interactive=0
#     - php -S localhost:80 --docroot app/tests &>/dev/null&
#     - ./vendor/bin/codecept run app -c tests
#   artifacts:
#     name: "debug"
#     when: on_failure
#     untracked: true
#     paths:
#       - ${CI_PROJECT_DIR}/app/runtime
#       - ${CI_PROJECT_DIR}/tests/_output

############## package ##############
package:develop:
  extends: .stage-package
  script:
    - if [ ! -d "vendor" ]; then
    -   composer install --prefer-dist --optimize-autoloader -n --no-interaction  --no-suggest -vvv
    -   composer dump-autoload --optimize
    - fi
    - php init --env=Test --overwrite=y
  only:
    refs:
      - develop

package:master:
  extends: .stage-package
  script:
    - composer install --prefer-dist --optimize-autoloader -n --no-interaction --no-suggest --no-dev -vvv
    - composer dump-autoload --optimize
    - php init --env=Production --overwrite=y
  only:
    refs:
      - master
      - tags

############## deploy ##############
deploy:test:
  extends: .stage-deploy
  variables:
    SSH_SERVERS: ${SSH_SERVERS_TEST}
  dependencies:
    - package:develop
  only:
    refs:
      - develop

deploy:pre:
  extends: .stage-deploy
  variables:
    SSH_SERVERS: ${SSH_SERVERS_PRE}
  dependencies:
    - package:master
  only:
    refs:
      - master

deploy:prod:
  extends: .stage-deploy
  variables:
    SSH_SERVERS: ${SSH_SERVERS_PROD}
  dependencies:
    - package:master
  only:
    refs:
      - tags
############## release ##############
release:test:
  extends: .stage-release
  variables:
    SSH_SERVERS: ${SSH_SERVERS_TEST}
  only:
    refs:
      - develop
  environment:
    name: testing

release:pre:
  extends: .stage-release
  variables:
    SSH_SERVERS: ${SSH_SERVERS_PRE}
  only:
    refs:
      - master
  environment:
    name: pre

release:prod:
  extends: .stage-release
  variables:
    SSH_SERVERS: ${SSH_SERVERS_PROD}
  only:
    refs:
      - tags
  environment:
    name: production

############## Hidden Job ##############
.build-docker:
  stage: build
  image: docker:latest
  retry: 2
  script:
    - if [ -n "$CI_COMMIT_TAG" ]; then docker_env='prod'; elif [ "$CI_COMMIT_REF_NAME" == 'master' ]; then docker_env='pre'; else docker_env='test'; fi 
    - docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PASSWD} http://${DOCKER_REGISTRY_URL}
    - docker build -t ${DOCKER_REGISTRY_URL}/${CI_PROJECT_PATH}/${docker_env}/${DOCKER_NAME} docker/files/${DOCKER_NAME}/
    - docker push ${DOCKER_REGISTRY_URL}/${CI_PROJECT_PATH}/${docker_env}/${DOCKER_NAME}
    - docker rmi ${DOCKER_REGISTRY_URL}/${CI_PROJECT_PATH}/${docker_env}/${DOCKER_NAME}
  only:
    refs:
      - develop
      - master
      - tags

.stage-test:
  stage: test
  cache:
    key: "${CI_COMMIT_REF_NAME}"
    policy: pull
    paths:
      - vendor
  before_script:
    - if [ ! -d "vendor" ]; then
    -   composer install --prefer-dist --optimize-autoloader -n --no-interaction  --no-suggest -vvv
    -   composer dump-autoload --optimize
    - fi

.stage-package:
  stage: package
  after_script:
    - if [ -n "$CI_COMMIT_TAG" ]; then docker_env='prod'; elif [ "$CI_COMMIT_REF_NAME" == 'master' ]; then docker_env='pre'; else docker_env='test'; fi 
    - echo $docker_env
    - sed -i "s#<docker_env>#${docker_env}#g" docker-compose.yaml
    - sed -i "s#<registry_url>#${DOCKER_REGISTRY_URL}#g" docker-compose.yaml
    - sed -i "s#<project_path>#${CI_PROJECT_PATH}#g" docker-compose.yaml
    - sed -i "s#<project_name>#${CI_PROJECT_NAME}#g" docker-compose.yaml
    - sed -i "s#<project_namespace>#${CI_PROJECT_NAMESPACE}#g" docker-compose.yaml
    - sed -i "s#<website_path>#${WEBSITE_PATH}#g" docker-compose.yaml
    - sed -i "s#<runtime_path>#${RUNTIME_PATH}#g" docker-compose.yaml
    - sed -i "s#<http_port>#${HTTP_PORT}#g" docker-compose.yaml
    - sed -i "s#<https_port>#${HTTPS_PORT}#g" docker-compose.yaml
    - ./pc/fis3/build.sh
    - ./h5/fis3/build.sh
    - rm -rf console/runtime
    - rm -rf admin/web/assets/* admin/runtime admin/tests
    - rm -rf app/web/assets/* app/runtime app/tests
    - rm -rf pc/web/assets/* pc/runtime pc/tests
    - rm -rf h5/web/assets/* h5/runtime h5/tests
    - rm -rf pc/fis3 h5/fis3
  cache:
    key: "${CI_COMMIT_REF_NAME}"
    policy: pull
    paths:
      - vendor
  artifacts:
    name: "${CI_PROJECT_NAME}"
    untracked: false
    paths:
      - manifests
      - vendor
      - common
      - console
      - admin
      - app
      - pc
      - h5
      - yii
      - docker-compose.yaml
      - crontab

.stage-deploy:
  stage: deploy
  variables:
    GIT_STRATEGY: none
    RUNTIME_APPS: admin,app,console,crontab,pc,h5
  script:
    - if [ ! -d "vendor" ]; then
    -   exit 1
    - fi
    - eval $(ssh-agent -s)
    - ssh-add <(echo "${SSH_PRIVATE_KEY}")
    - mkdir -p ~/.ssh    
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - OLDIFS=$IFS;IFS=',';for SSH_SERVER in ${SSH_SERVERS}; do
    -   ssh ${SSH_SERVER} "mkdir -vp ${BUILD_PATH}${CI_PROJECT_PATH}/${CI_COMMIT_SHA}"
    -   scp -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o CheckHostIP=false -r ./ ${SSH_SERVER}:${BUILD_PATH}${CI_PROJECT_PATH}/${CI_COMMIT_SHA}
    -   ssh -T -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o CheckHostIP=false ${SSH_SERVER} "cd ${BUILD_PATH}${CI_PROJECT_PATH}/ && ls -1rt | tac | awk 'FNR > ${KEEP_VERSION_NUM}  {print(\$1);}' | xargs -i rm -rf {}"
    -   OLDIFS=$IFS;IFS=',';for i in ${RUNTIME_APPS}; do
    -     ssh ${SSH_SERVER} "if [ ! -d \"${RUNTIME_PATH}${CI_PROJECT_PATH}/${i}\" ]; then mkdir -vp ${RUNTIME_PATH}${CI_PROJECT_PATH}/${i}/runtime/logs; chmod -R 777 ${RUNTIME_PATH}${CI_PROJECT_PATH}/${i}/runtime/; fi && ln -sfn ${RUNTIME_PATH}${CI_PROJECT_PATH}/${i}/runtime ${BUILD_PATH}${CI_PROJECT_PATH}/${CI_COMMIT_SHA}/${i}/"
    -   done;IFS=$OLDIFS
    - done;IFS=$OLDIFS

.stage-release:
  stage: release
  variables:
    GIT_STRATEGY: none
  dependencies: []
  script:
    - eval $(ssh-agent -s)
    - ssh-add <(echo "${SSH_PRIVATE_KEY}")
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - OLDIFS=$IFS;IFS=',';for SSH_SERVER in ${SSH_SERVERS}; do
    -   ssh ${SSH_SERVER} "docker login -u ${DOCKER_REGISTRY_USER} -p ${DOCKER_REGISTRY_PASSWD} http://${DOCKER_REGISTRY_URL}"
    -   ssh ${SSH_SERVER} "if [ -d \"${WEBSITE_PATH}${CI_PROJECT_PATH}\" ]; then cd ${WEBSITE_PATH}${CI_PROJECT_PATH}; docker-compose pull; docker-compose rm -fsva; fi"
    -   ssh ${SSH_SERVER} "if [ ! -d \"${WEBSITE_PATH}${CI_PROJECT_NAMESPACE}\" ]; then mkdir -vp ${WEBSITE_PATH}${CI_PROJECT_NAMESPACE}; fi && ln -sfn ${BUILD_PATH}${CI_PROJECT_PATH}/${CI_COMMIT_SHA} ${BUILD_PATH}${CI_PROJECT_PATH}/current-${CI_PROJECT_NAME}.tmp && mv -fT ${BUILD_PATH}${CI_PROJECT_PATH}/current-${CI_PROJECT_NAME}.tmp ${WEBSITE_PATH}${CI_PROJECT_PATH}"
    -   ssh ${SSH_SERVER} "cd ${WEBSITE_PATH}${CI_PROJECT_PATH}; docker-compose pull; docker-compose up --force-recreate -d"
    - done;IFS=$OLDIFS